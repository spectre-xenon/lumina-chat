// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat_members.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addChatMember = `-- name: AddChatMember :exec
INSERT INTO chat_members (chat_id, user_id, joined_at)
VALUES ($1, $2, NOW())
ON CONFLICT DO NOTHING
`

type AddChatMemberParams struct {
	ChatID uuid.UUID `json:"chat_id"`
	UserID uuid.UUID `json:"user_id"`
}

// Add a user to a chat
func (q *Queries) AddChatMember(ctx context.Context, arg AddChatMemberParams) error {
	_, err := q.db.Exec(ctx, addChatMember, arg.ChatID, arg.UserID)
	return err
}

const getChatMembers = `-- name: GetChatMembers :many
SELECT u.id, u.username
FROM users u
JOIN chat_members cm ON u.id = cm.user_id
WHERE cm.chat_id = $1
`

type GetChatMembersRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
}

// Get chat members
func (q *Queries) GetChatMembers(ctx context.Context, chatID uuid.UUID) ([]GetChatMembersRow, error) {
	rows, err := q.db.Query(ctx, getChatMembers, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatMembersRow
	for rows.Next() {
		var i GetChatMembersRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeChatMember = `-- name: RemoveChatMember :exec
DELETE FROM chat_members
WHERE chat_id = $1 AND user_id = $2
`

type RemoveChatMemberParams struct {
	ChatID uuid.UUID `json:"chat_id"`
	UserID uuid.UUID `json:"user_id"`
}

// Remove a user from a chat
func (q *Queries) RemoveChatMember(ctx context.Context, arg RemoveChatMemberParams) error {
	_, err := q.db.Exec(ctx, removeChatMember, arg.ChatID, arg.UserID)
	return err
}
