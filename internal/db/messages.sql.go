// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: messages.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, chat_id, sender_id, content, sent_at)
VALUES (gen_random_uuid(), $1, $2, $3, NOW())
RETURNING id, content, sender_id, sent_at
`

type CreateMessageParams struct {
	ChatID   uuid.UUID `json:"chat_id"`
	SenderID uuid.UUID `json:"sender_id"`
	Content  string    `json:"content"`
}

type CreateMessageRow struct {
	ID       int64     `json:"id"`
	Content  string    `json:"content"`
	SenderID uuid.UUID `json:"sender_id"`
	SentAt   time.Time `json:"sent_at"`
}

// Create a new message
func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (CreateMessageRow, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.ChatID, arg.SenderID, arg.Content)
	var i CreateMessageRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.SenderID,
		&i.SentAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE id = $1 AND sender_id = $2
`

type DeleteMessageParams struct {
	ID       int64     `json:"id"`
	SenderID uuid.UUID `json:"sender_id"`
}

// Delete a message
func (q *Queries) DeleteMessage(ctx context.Context, arg DeleteMessageParams) error {
	_, err := q.db.Exec(ctx, deleteMessage, arg.ID, arg.SenderID)
	return err
}

const editMessage = `-- name: EditMessage :one
UPDATE messages
SET content = $1, sent_at = NOW()
WHERE id = $2 AND sender_id = $3
RETURNING id, content, sent_at
`

type EditMessageParams struct {
	Content  string    `json:"content"`
	ID       int64     `json:"id"`
	SenderID uuid.UUID `json:"sender_id"`
}

type EditMessageRow struct {
	ID      int64     `json:"id"`
	Content string    `json:"content"`
	SentAt  time.Time `json:"sent_at"`
}

// Edit a message
func (q *Queries) EditMessage(ctx context.Context, arg EditMessageParams) (EditMessageRow, error) {
	row := q.db.QueryRow(ctx, editMessage, arg.Content, arg.ID, arg.SenderID)
	var i EditMessageRow
	err := row.Scan(&i.ID, &i.Content, &i.SentAt)
	return i, err
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT id, chat_id, sender_id, content, sent_at
FROM messages
WHERE chat_id = $1
ORDER BY sent_at DESC
LIMIT $2 OFFSET $3
`

type GetChatMessagesParams struct {
	ChatID uuid.UUID `json:"chat_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

// Get all messages in a chat
func (q *Queries) GetChatMessages(ctx context.Context, arg GetChatMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getChatMessages, arg.ChatID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.SenderID,
			&i.Content,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
